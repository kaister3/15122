//第六章

//习题1：
//如果循环体执行，即 lower <= upper，那么[lower, upper]的区间不为空。
//A[lower - 1] 及其左边的元素一定小于x，A[upper + 1]及其右边的元素一定大于x。
//如果元素不存在，则会在lower = upper的时候，即区间内只有一个元素的时候退出。
//若元素存在，则返回mid，然后退出循环。
int binsearch(int x, int[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n)) || ((0 <= \result && \result < n) && A[\result] == x);@*/
{
  int lower = 0;
  int upper = n - 1;
  while (lower <= upper)
  //@loop_invariant 0 <= lower && lower <= upper && upper <= n - 1;
  //@loop_invariant (lower == 0 || A[lower-1] < x);
  //@loop_invariant (upper == n - 1 || A[upper + 1] > x);
  {
    int mid = lower + (upper - lower) / 2;
    //@assert lower <= mid && mid <= upper;
    if (A[mid] == x)
      return mid;
    else if (A[mid] < x)
      lower = mid + 1;
    else /*@assert(A[mid] > x);@*/
      upper = mid - 1;
  }
  return -1;
}

//习题二：
//将
//@loop_invariant (lower == 0 || A[lower-1] < x);
//@loop_invariant (upper == n || A[upper] > x);
//改为
//@loop_invariant (lower == 0 || !is_in(x,A,0,lower));
//@loop_invariant (upper == n || !is_in(x,A,upper,n));

int binsearch(int x, int[ ] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))
       || ((0 <= \result && \result < n) && A[\result] == x);
  @*/
{
  int lower = 0;
  int upper = n;
  while (lower < upper)
  //@loop_invariant 0 <= lower && lower <= upper && upper <= n;
  //@loop_invariant (lower == 0 || !is_in(x,A,0,lower));
  //@loop_invariant (upper == n || !is_in(x,A,upper,n));
  {
    int mid = lower + (upper - lower) / 2;
    //@assert lower <= mid && mid < upper;
    if (A[mid] == x)
      return mid;
    else if (A[mid] < x)
      lower = mid + 1;
    else /*@assert(A[mid] > x);@*/
      upper = mid;
  }
  return -1;
}


//习题三：

int binsearch(int x, int[ ] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))
       || ((0 <= \result && \result < n) && A[\result] == x && (\result==0||A[\result-1]<x));
  @*/
{
  int lower = 0;
  int upper = n - 1;
  while (lower < upper)
  //@loop_invariant 0 <= lower && lower <= upper && upper <= n-1;
  //@loop_invariant (lower == 0 || A[lower-1] < x);
  //@loop_invariant (upper == n || A[upper] >= x);
  {
    int mid = lower + (upper - lower) / 2;
    //@assert lower <= mid && mid < upper;
    if (A[mid] < x)
      lower = mid + 1;
    else /*@assert(A[mid] >= x);@*/
      upper = mid;
  }
  if (A[lower] == x)
    return lower;
  else
    return -1;
}
//无论是否存在，在lower==upper时都可以终止。


//习题四：
//可能会溢出，当数组很大的时候lower+upper超出int表示的范围，就会发生溢出。
//举例：若lower和upper都没有溢出，比如lower为1 073 741 823，  upper为2 147 483 647时，
//mid发生截断，是一个负数-536870913。此时显然A[mid]越界，程序会停止运行。不再满足约定/*@assert(A[mid] > x);@*/


//习题五：
//@loop_invariant 0 <= lower && lower <= upper && upper <= n;
//@loop_invariant (lower == 0 || A[lower-1] < x);
//@loop_invariant (upper == n || A[upper] > x);
{
  lower = lower;
  upper = upper;
}

//循环无法终止，故错误。
