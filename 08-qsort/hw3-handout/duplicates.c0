#use "./sort-awful.c0"
#use "./sort.c0"
#use "./sortcopy-awful.c0"
#use <string.h>
#use <malloc>

//task 1
bool all_distinct(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
{
    for (int i = 0; i < n - 1; i++)
    {
        if (strcmp(A[i], A[i+1]))
        {
            return false;
        }  
    }
    return true;
}

//task 2
int count_distinct(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
{
    int result = 1;
    for (int i = 0; i < n - 1; i++)
    {
        if (strcmp(A[i], A[i+1]) == 0)
        {
            result++;
        }
    }
    return result;
}

//A question for you to think about: given that it could be met, why don't we impose this
//requirement on your implementation of all_distinct?)
//答：all_distinct 函数只要检测到一个重复就返回，因此平均运行时间小，不需要考虑

//task 3
string[] remove_duplicates(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n)
{
    int length = count_distinct(A, n);
    string[length] result;
    for (int i = 0; i < length - 1; i++)
    {
        if (strcmp(A[i], A[i+1]) == 0)
        {
            *result[i] = malloc(sizeof(A[i]));
            strcopy(result[i], A[i]);
        }
    }
    *result[i] = malloc(sizeof(A[i]));
    strcopy(result[i], A[i]);
    return *result;
}